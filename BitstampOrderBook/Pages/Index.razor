@page "/"
@using BitstampOrderBook.Data.DTOs
@using BitstampOrderBook.Data.Services
@using Blazorise.Charts
@using BitstampOrderBook.Data
@using BitstampOrderBook.Data.Models;
@using Blazorise
@using Blazorise.Bootstrap;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR;
@inject IHubContext<OrderBookHub> HubContext
@inject NavigationManager NavigationManager
@inject OrderBookService orderBookService;



<div class="charts-container">
    <div class="chart-wrapper">
        <Chart @ref="bidChart" Type="ChartType.Bar" TItem="decimal" />
    </div>
    <div class="chart-wrapper">
        <Chart @ref="askChart" Type="ChartType.Bar" TItem="decimal" />
    </div>
</div>

<div class="d-flex flex-row mt-4">
    <div>
        <Button Color="Color.Primary" @onclick="StopUpdates">@buttonText</Button>
    </div>
    <div class="ml-4">
        <NumericEdit @bind-Value="@timestamp" placeholder="Enter timestamp" />
    </div>
    <div class="ml-2">
        <Button  Color="Color.Primary" @onclick="LoadDataByTimestamp">Load Data</Button>
    </div>
</div>


@code {
    Chart<decimal> bidChart;
    Chart<decimal> askChart;

    private List<decimal> bidAmount = new List<decimal>();
    private List<string> bidPrices = new List<string>();

    private List<decimal> askAmount = new List<decimal>();
    private List<string> askPrices = new List<string>();


    private HubConnection connection;

    private bool isUpdating = true;
    private string buttonText = "Stop";

    private double timestamp;

    private static double maxY = 1;
    private ChartOptions chartOptions = new ChartOptions
        {
            Scales = new ChartScales
            {
                Y = new ChartAxis
                {
                    Display = false,
                    Max = maxY
                }
            }
        };


    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderBookHub"))
            .Build();

        connection.On<OrderBookDto>("ReceiveOrderBook", async (orderBookDto) =>
        {
            if (orderBookDto is not null && isUpdating)
            {
                await UpdateChartData(orderBookDto);
            }
        });

        await connection.StartAsync();
    }

    private async Task UpdateChartData(OrderBookDto orderBookDto)
    {
        UpdateAmountAndPriceOnCharts(orderBookDto);
        UpdateMaxY(orderBookDto);

        timestamp = orderBookDto.Data.Microtimestamp;

        await HandleRedraw();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await bidChart.Clear();
        await askChart.Clear();

        await bidChart.AddLabelsDatasetsAndUpdate(bidPrices, GetBidChartDataset());
        await bidChart.SetOptions(chartOptions);

        await askChart.AddLabelsDatasetsAndUpdate(askPrices, GetAskChartDataset());
        await askChart.SetOptions(chartOptions);
    }

    private ChartDataset<decimal> GetBidChartDataset()
    {
        return new()
            {
                Label = "Bids",
                Data = bidAmount,
                BackgroundColor = new List<string> { ChartColor.FromRgba(94, 214, 19, 0.8f) },
                BorderWidth = 0
            };
    }

    private ChartDataset<decimal> GetAskChartDataset()
    {
        return new()
            {
                Label = "Asks",
                Data = askAmount,
                BackgroundColor = new List<string> { ChartColor.FromRgba(205, 40, 15, 0.8f) },
                BorderWidth = 0
            };
    }

    private async Task LoadDataByTimestamp()
    {
        var orderBookDto = await orderBookService.GetOrderBookByTimestampAsync(timestamp);
        await UpdateChartData(orderBookDto);

        isUpdating = false;
        buttonText = "Start";
    }

    private void UpdateAmountAndPriceOnCharts(OrderBookDto orderBookDto)
    {
        bidAmount.Clear();
        bidPrices.Clear();

        askPrices.Clear();
        askAmount.Clear();


        foreach (var bid in orderBookDto.Data.Bids.Take(10))
        {
            bidAmount.Add(bid[1]);
            bidPrices.Add(bid[0].ToString());
        }

        foreach (var ask in orderBookDto.Data.Asks.Take(10))
        {
            askAmount.Add(ask[1]);
            askPrices.Add(ask[0].ToString());
        }
    }

    private void UpdateMaxY(OrderBookDto orderBookDto)
    {
        decimal maxBid = orderBookDto.Data.Bids.Take(10).Max(bid => bid[1]);
        decimal maxAsk = orderBookDto.Data.Asks.Take(10).Max(ask => ask[1]);


        maxY = (double)Math.Max(maxBid, maxAsk);
        chartOptions.Scales.Y.Max = maxY;
    }

    private void StopUpdates()
    {
        isUpdating = !isUpdating;
        buttonText = isUpdating ? "Stop" : "Start";
    }
}