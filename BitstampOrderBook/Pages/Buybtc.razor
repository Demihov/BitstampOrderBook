@page "/buybtc"
@using BitstampOrderBook.Data;
@using BitstampOrderBook.Data.Services.Hubs;
@using BitstampOrderBook.Data.Services;
@using Microsoft.AspNetCore.SignalR.Client
@using BitstampOrderBook.Data.DTOs
@using Microsoft.AspNetCore.SignalR;
@using Blazorise
@using Blazorise.Bootstrap;
@inject IHubContext<OrderBookHub> HubContext
@inject NavigationManager NavigationManager
@inject OrderBookService orderBookService

<h1>Buy BTC</h1>

<div class="form-group">
    <Label for="btcAmount">Amount of BTC to buy:</Label>
    <InputNumber @bind-Value="@btcAmount" Class="form-control" id="btcAmount" Step="0.0001" />
</div>

<Label for="btcPrice">Price of BTC: @btcPrice</Label>
<div>
    <Button Color="Color.Primary">Buy BTC</Button>
</div>


@code {
    private decimal btcAmount;
    private string btcPrice;

    private HubConnection connection;

    private async Task CalculatePrice()
    {
        if (connection is not null)
        {
            await connection.SendAsync("GetBTCPriceByAmount", btcAmount);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderBookHub"))
            .Build();

        connection.On<decimal>("ReceiveBTCPrice", price =>
        {
            btcPrice = String.Format("{0:#,#.00}", price);
            this.InvokeAsync(() => this.StateHasChanged());
        });

        connection.On("PriceUpdated", async () =>
        {
            await InvokeAsync(() => CalculatePrice());
        });

        await connection.StartAsync();
    }
}
